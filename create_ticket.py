import requests
import json
import time
import random

# Freshdesk API details
API_KEY = "5TMgbcZdRFY70hSpEdj"
DOMAIN = "benchmarkeducationcompany.freshdesk.com"
API_URL = f"https://{DOMAIN}/api/v2/tickets"

# Headers for authentication
HEADERS = {
    "Content-Type": "application/json"
}

# Sample ticket subjects and descriptions
TICKET_SUBJECTS = [
    "Subscription issue with Celigo",
    "Duplicate email problem detected",
    "Request for subscription hold verification",
    "Automated email conflicts",
    "Issue with old vs new process",
    "Support needed for duplicate emails",
    "Celigo fulfillment delay",
    "Unexpected email generation error"
]

TICKET_DESCRIPTIONS = [
    "The user has received duplicate emails for their subscription. Please verify and resolve.",
    "A subscription fulfillment email was generated by Celigo, but the new process already sent it.",
    "Check why the system is still sending old-style subscription emails.",
    "New automated process conflicts with Celigo email sending.",
    "Customer reports receiving duplicate subscription confirmation emails.",
    "An agent needs help identifying duplicate subscription issues.",
    "Email fulfillment process seems to be delayed due to old processing system.",
    "Customer received an email from Celigo that should have been suppressed."
]

# Function to generate a random email
def generate_random_email():
    first_names = ["john", "jane", "alex", "chris", "mike", "sarah", "emma", "ryan"]
    last_names = ["smith", "doe", "johnson", "brown", "davis", "wilson", "taylor", "martin"]
    domain = "example.com"
    return f"{random.choice(first_names)}.{random.choice(last_names)}{random.randint(100,999)}@{domain}"

# Function to create a ticket
def create_ticket(subject, description):
    payload = {
        "subject": subject,
        "description": description,
        "status": 2,  # Open
        "priority": 1,  # Low
        "group_id": 67000578451,  # Assign to 'Old Subs' group
        "responder_id": 67051499418,  # Assign to specific agent
        "email": generate_random_email()  # Random requester email
    }

    response = requests.post(API_URL, auth=(API_KEY, "X"), headers=HEADERS, data=json.dumps(payload))

    # Handle API rate limits
    if response.status_code == 429:
        retry_after = int(response.headers.get("Retry-After", 5))
        print(f"Rate limit exceeded. Retrying in {retry_after} seconds...")
        time.sleep(retry_after)
        return create_ticket(subject, description)  # Retry

    if response.status_code == 201:
        ticket_id = response.json().get("id")
        print(f"Ticket created successfully: ID {ticket_id}")
    else:
        print(f"Failed to create ticket: {response.status_code}, {response.text}")

# Create 8 tickets
for _ in range(8):
    subject = random.choice(TICKET_SUBJECTS)
    description = random.choice(TICKET_DESCRIPTIONS)
    create_ticket(subject, description)
    time.sleep(1)  # Delay to prevent hitting rate limits

